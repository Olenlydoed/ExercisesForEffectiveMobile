Задание №3 API
Контекст: Ты тестируешь API для создания пользователя: 
POST /api/v1/users

Пример тела запроса:
{
  "name": "Анна",
  "email": "anna@example.com",
  "age": 27
}

Ожидается, что при корректном вводе API возвращает:
{  
  "id": 123,
  "name": "Анна",
  "email": "anna@example.com",
  "age": 27,
  "status": "active"
}	

1. Какие поля ты бы проверил на валидацию? Приведи 3 примера некорректных запросов.
Поля для проверки на валидацию и примеры некорректных запросов

Поля для валидации:
- name: Должен быть строкой и не должен быть пустым.
- email: Должен соответствовать формату email и быть уникальным.
- age: Должен быть целым числом и находиться в допустимом диапазоне (например, от 1 до 120).

Примеры некорректных запросов:
1.1. Пустое имя:
{
  "name": "",
  "email": "anna@example.com",
  "age": 27
}

1.2. Некорректный формат email:
{
  "name": "Анна",
  "email": "annaexample.com",  // неправильный формат
  "age": 27
}

1.3. Возраст вне допустимого диапазона:
{
  "name": "Анна",
  "email": "anna@example.com",
  "age": -5  // некорректное значение
}

2 Что бы ты проверил в заголовках (headers) запроса и ответа?
Заголовки запроса:
- Content-Type: Убедиться, что установленный тип содержимого (обычно application/json для JSON-запросов).
- Authorization: Если API требует аутентификации, убедитесь, что заголовок аутентификации присутствует и корректный.

Заголовки ответа:
- Content-Type: Убедитесь, что ответ также имеет правильный заголовок, обычно application/json.
- Status Code: Убедитесь, что статус-код соответствует ожидаемому результату.


3 Какие типы тестирования можно проводить через Postman?
-	Функциональное тестирование: Проверка, что API работает согласно спецификациям и требованиям.
-	Тестирование производительности: Регулярное тестирование, чтобы убедиться в быстродействии API под нагрузкой.
-	Тестирование безопасности: Проверка доступа к API, чтобы убедиться, что защищенные ресурсы нельзя получить без необходимости.
-	Тесты на валидацию: Проверки на корректность введенных данных и обработку ошибок.
-	Регрессионное тестирование: Проверка, что изменения в коде не нарушили существующую функциональность.

4 Какие коды ответа (status codes) ты ожидаешь при:
 ◦ Успешном создании
201 Created: Успешное создание пользователя.

 ◦ Ошибке валидации
400 Bad Request: Неправильные данные в запросе (например, пустое имя, некорректный email).

 ◦ Попытке создать пользователя с уже существующим email
409 Conflict: Конфликт, связанный с тем, что email уже используется.

5 Как бы ты оформил тест-кейс на проверку этого эндпоинта?
Тест-кейс для проверки API создания пользователя:

  Тест-кейс ID: TC001  
  Название: Проверка успешного создания пользователя  
  Описание: Проверка, что новый пользователь создается успешно при наличии действительных данных.  
  Предусловия: API должен быть доступен.  
  Шаги:
    1. Отправить POST-запрос на /api/v1/users с телом запроса
    {
      "name": "Анна",
      "email": "anna@example.com",
      "age": 27
    }
    2. Проверить, что код ответа равен 201 Created.
    3. Проверить, что в ответе содержится id, name, email, age, и status равен "active".

Ожидаемый результат:
  1. Код ответа: 201 Created.
  2. Тело ответа соответствует следующим ожидаемым данным:
    {
      "id": 123,  // ID должен быть уникальным
      "name": "Анна",
      "email": "anna@example.com",
      "age": 27,
      "status": "active"
    }

